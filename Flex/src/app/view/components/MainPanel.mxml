<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			import app.model.vo.BuildVO;
			
			import flash.net.navigateToURL;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			public static const SURROUNDING:String = "Surrounding";
			public static const INFO:String = "Info";
			public static const STEREOSCOPIC:String = "StereoScopic";
			public static const EMERGENCY:String = "Emergency";
			
			[Bindable]public var Build:BuildVO;
			
			private var buttonIndex:Number = -1;
			public function get ButtonIndex():Number
			{
				return buttonIndex;
			}
			
			private function initMenu(button:Button):void
			{
				for(var i:Number = Menu.numElements - 1; i >= 0; i--)
				{
					var element:IVisualElement = Menu.getElementAt(i);
					if(element is Button)
					{
						(element as Button).enabled = true;
					}
					else
					{
						Menu.removeElement(element);
					}
				}
				
				button.enabled = false;
				
				buttonIndex = Menu.getElementIndex(button);
			}
			
			protected function buttonStereoscopic_buttonDownHandler(event:FlexEvent):void
			{
				var button:Button = event.currentTarget as Button;
				
				initMenu(button);
				
				dispatchEvent(new Event(STEREOSCOPIC));
			}			
			
			protected function buttonInfo_buttonDownHandler(event:FlexEvent):void
			{
				var button:Button = event.currentTarget as Button;
				
				initMenu(button);
				
				dispatchEvent(new Event(INFO));
			}
			
			protected function buttonSurrounding_buttonDownHandler(event:FlexEvent):void
			{
				var button:Button = event.currentTarget as Button;
				
				initMenu(button);
				
				dispatchEvent(new Event(SURROUNDING));
			}
						
			protected function ContentGroup_creationCompleteHandler(event:FlexEvent):void
			{
				ChangeWatcher.watch(ContentGroup,"contentWidth",contentResize);
				ChangeWatcher.watch(ContentGroup,"contentHeight",contentResize);
			}
			
			private function contentResize(event:Event):void
			{
				ContentGroup.horizontalScrollPosition = (ContentGroup.contentWidth - ContentGroup.width) / 2;
				ContentGroup.verticalScrollPosition = (ContentGroup.contentHeight - ContentGroup.height) / 2;
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<s:Image source="@Embed('assets/image/背景.jpg')" mouseEnabled="false"/>
	
	<s:Scroller x="25" y="95" width="777" height="649">
		<s:Group id="ContentGroup" creationComplete="ContentGroup_creationCompleteHandler(event)">
		</s:Group>
	</s:Scroller>
			
	<s:VGroup x="830" y="100" id="Menu">
		<s:Button label="周边环境" buttonMode="true"
				  width="175" height="47" 
				  skinClass="app.skin.skinMenuButton" buttonDown="buttonSurrounding_buttonDownHandler(event)"/>
		<s:Button label="目标信息" buttonMode="true"
				  width="175" height="47" 
				  skinClass="app.skin.skinMenuButton" buttonDown="buttonInfo_buttonDownHandler(event)"/>
		<s:Button label="通道信息" buttonMode="true"
				  width="175" height="47" 
				  skinClass="app.skin.skinMenuButton"/>
		<s:Button label="内部信息" buttonMode="true"
				  width="175" height="47" 
				  skinClass="app.skin.skinMenuButton" buttonDown="buttonStereoscopic_buttonDownHandler(event)"/>
		<s:Button label="应急预案" buttonMode="true" buttonDown="dispatchEvent(new Event(EMERGENCY))"
				  width="175" height="47" visible="{Boolean(Build.TMB_EmergPath)}"
				  skinClass="app.skin.skinMenuButton"/>
	</s:VGroup>
	
	<s:Label y="15" color="#F6FF00" fontFamily="隶书" fontSize="40" horizontalCenter="0" text="{Build.TMB_Name}"/>
</s:Group>
