<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx">
	<s:states>
		<s:State name="Normal"/>
		<s:State name="Edit"/>
	</s:states>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import app.model.vo.BuildVO;
			import app.model.vo.FloorVO;
			
			import mx.collections.ArrayCollection;
			
			public static const FLOORCHANGE:String = "floorchange";	
			public static const FLOOROFFSET:String = "flooroffset";				
			public static const FLOORROTATION:String = "floorrotation";					
			public static const FLOORSAVE:String = "floorsave";	
			
			[Bindable]public var build:BuildVO;
			
			[Bindable]public var dp:ArrayCollection = new ArrayCollection;
			
			[Bindable]public var xOffset:Number = 0;
			[Bindable]public var yOffset:Number = 0;
			[Bindable]public var yRotation:Number = 0;
			[Bindable]public var xRotation:Number = 0;
			[Bindable]public var zRotation:Number = 0;
			[Bindable]public var floorAlpha:Number = 0.5;
			[Bindable]public var floorScale:Number = 1;
			[Bindable]public var scale:Number = 0.2;
			
			protected function hslider1_changeHandler(event:Event):void
			{
				var hslider:HSlider = event.currentTarget as HSlider;
				this.xOffset = hslider.value;
				
				dispatchEvent(new Event(FLOOROFFSET));
			}
			
			protected function sliderXOffset_changeHandler(event:Event):void
			{
				var num:NumericStepper = event.currentTarget as NumericStepper;
				this.xOffset = num.value;
				
				dispatchEvent(new Event(FLOOROFFSET));
			}
			
			protected function hslider2_changeHandler(event:Event):void
			{
				var hslider:HSlider = event.currentTarget as HSlider;
				this.yOffset = hslider.value;
				
				dispatchEvent(new Event(FLOOROFFSET));
			}
			
			protected function sliderYOffset_changeHandler(event:Event):void
			{
				var num:NumericStepper = event.currentTarget as NumericStepper;
				this.yOffset = num.value;
				
				dispatchEvent(new Event(FLOOROFFSET));
			}
			
			protected function Scale_changeHandler(event:Event):void
			{
				var floor:FloorVO = listFloor.selectedItem as FloorVO;
				
				if(floor != null)
				{
					if(event.currentTarget is NumericStepper)
					{
						this.floorScale = (event.currentTarget as NumericStepper).value;
					}
					else
					{
						this.floorScale = (event.currentTarget as HSlider).value;					
					}
					
					floor.scale = this.floorScale;
					
					dispatchEvent(new Event(FLOORROTATION));
				}
			}
			
			protected function YRotation_changeHandler(event:Event):void
			{
				var floor:FloorVO = listFloor.selectedItem as FloorVO;
				
				if(floor != null)
				{
					if(event.currentTarget is NumericStepper)
					{
						this.yRotation = (event.currentTarget as NumericStepper).value;
					}
					else
					{
						this.yRotation = (event.currentTarget as HSlider).value;					
					}
					
					floor.yRotation = this.yRotation;
					
					dispatchEvent(new Event(FLOORROTATION));
				}
			}
			
			protected function XRotation_changeHandler(event:Event):void
			{
				var floor:FloorVO = listFloor.selectedItem as FloorVO;
				
				if(floor != null)
				{
					if(event.currentTarget is NumericStepper)
					{
						this.xRotation = (event.currentTarget as NumericStepper).value;
					}
					else
					{
						this.xRotation = (event.currentTarget as HSlider).value;					
					}
					
					floor.xRotation = this.xRotation;					
					
					dispatchEvent(new Event(FLOORROTATION));
				}
			}
			
			protected function ZRotation_changeHandler(event:Event):void
			{
				var floor:FloorVO = listFloor.selectedItem as FloorVO;
				
				if(floor != null)
				{
					if(event.currentTarget is NumericStepper)
					{
						this.zRotation = (event.currentTarget as NumericStepper).value;
					}
					else
					{
						this.zRotation = (event.currentTarget as HSlider).value;					
					}
					
					floor.zRotation = this.zRotation;					
					
					dispatchEvent(new Event(FLOORROTATION));
				}
			}
			
			protected function Alpha_changeHandler(event:Event):void
			{
				var floor:FloorVO = listFloor.selectedItem as FloorVO;
				
				if(floor != null)
				{
					if(event.currentTarget is NumericStepper)
					{
						this.floorAlpha = (event.currentTarget as NumericStepper).value;
					}
					else
					{
						this.floorAlpha = (event.currentTarget as HSlider).value;					
					}
					
					floor.alpha = this.floorAlpha;					
					
					dispatchEvent(new Event(FLOORROTATION));
				}
			}			
		]]>
	</fx:Script>
	
	<s:DataGroup itemRenderer="app.renderer.rendererMenuLayer" dataProvider="{dp}" excludeFrom="Edit">		
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
	</s:DataGroup>
	
	<s:VGroup width="170" includeIn="Edit"
			  horizontalAlign="center">
		<s:HGroup verticalAlign="middle" width="100%">
			<s:Label text="X偏移：" width="{labelScale.width}" color="0xFFFFFF"/>
			<s:HSlider width="100%" minimum="{-build.BitmapWidth / 2}" maximum="{build.BitmapWidth / 2}" stepSize="1" dataTipPrecision="0" value="{xOffset}"
					   change="hslider1_changeHandler(event)"/>
			<s:NumericStepper width="60" id="sliderXOffset" minimum="{-build.BitmapWidth / 2}" maximum="{build.BitmapWidth / 2}" stepSize="1" value="{xOffset}"
							  textInput="sliderXOffset_changeHandler(event)" 
							  change="sliderXOffset_changeHandler(event)"/>
		</s:HGroup>
		<s:HGroup verticalAlign="middle" width="100%">
			<s:Label text="Y偏移：" width="{labelScale.width}" color="0xFFFFFF"/>
			<s:HSlider width="100%" minimum="{-build.BitmapHeight / 2}" maximum="{build.BitmapHeight / 2}" stepSize="1" dataTipPrecision="0" value="{yOffset}"
					   change="hslider2_changeHandler(event)"/>
			<s:NumericStepper width="60" id="sliderYOffset" minimum="{-build.BitmapHeight / 2}" maximum="{build.BitmapHeight / 2}" stepSize="1" value="{yOffset}"
							  textInput="sliderYOffset_changeHandler(event)"
							  change="sliderYOffset_changeHandler(event)"/>
		</s:HGroup>
		<s:HGroup verticalAlign="middle" width="100%">
			<s:Label text="X轴旋转：" width="{labelScale.width}" color="0xFFFFFF"/>
			<s:HSlider width="100%" minimum="0" maximum="360" stepSize="1" dataTipPrecision="0" value="{yRotation}"
					   change="YRotation_changeHandler(event)"/>
			<s:NumericStepper width="60" minimum="0" maximum="360" stepSize="1" value="{yRotation}"
							  textInput="YRotation_changeHandler(event)"
							  change="YRotation_changeHandler(event)"/>
		</s:HGroup>
		<s:HGroup verticalAlign="middle" width="100%">
			<s:Label text="Y轴旋转：" width="{labelScale.width}" color="0xFFFFFF"/>
			<s:HSlider width="100%" minimum="0" maximum="360" stepSize="1" dataTipPrecision="0" value="{xRotation}"
					   change="XRotation_changeHandler(event)"/>
			<s:NumericStepper width="60" minimum="0" maximum="360" stepSize="1" value="{xRotation}"
							  textInput="XRotation_changeHandler(event)"
							  change="XRotation_changeHandler(event)"/>
		</s:HGroup>
		<s:HGroup verticalAlign="middle" width="100%">
			<s:Label text="Z轴旋转：" width="{labelScale.width}" color="0xFFFFFF"/>
			<s:HSlider width="100%" minimum="0" maximum="360" stepSize="1" dataTipPrecision="0" value="{zRotation}"
					   change="ZRotation_changeHandler(event)"/>
			<s:NumericStepper width="60" minimum="0" maximum="360" stepSize="1" value="{zRotation}"
							  textInput="ZRotation_changeHandler(event)"
							  change="ZRotation_changeHandler(event)"/>
		</s:HGroup>
		<s:HGroup verticalAlign="middle" width="100%">
			<s:Label text="透明度：" width="{labelScale.width}" color="0xFFFFFF"/>
			<s:HSlider width="100%" minimum="0.0" maximum="1.0" stepSize="0.1" dataTipPrecision="1" value="{floorAlpha}"
					   change="Alpha_changeHandler(event)"/>
			<s:NumericStepper width="60" minimum="0.0" maximum="1.0" stepSize="0.1" value="{floorAlpha}"
							  textInput="Alpha_changeHandler(event)"
							  change="Alpha_changeHandler(event)"/>
		</s:HGroup>
		<s:HGroup verticalAlign="middle" width="100%">
			<s:Label text="缩放比例：" id="labelScale" color="0xFFFFFF"/>
			<s:HSlider width="100%" minimum="0.00" maximum="2.00" stepSize="0.01" value="{scale}"
					   change="Scale_changeHandler(event)"/>
			<s:NumericStepper width="60" id="sliderScale" minimum="0.00" maximum="2.00" stepSize="0.01" value="{scale}"
							  textInput="Scale_changeHandler(event)"
							  change="Scale_changeHandler(event)"/>
		</s:HGroup>
		<s:List id="listFloor" labelField="floorName" width="100%" height="100%" dataProvider="{build.floors}" change="dispatchEvent(new Event(FLOORCHANGE));"/>
		<s:Button label="保存" buttonDown="dispatchEvent(new Event(FLOORSAVE));"/>
	</s:VGroup>
</s:VGroup>