<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"	   
			   xmlns:components="app.view.components.*"
			   preloader="app.view.components.subComponents.AppDownloadProgressBar" 
			   width="1024" height="768" fontFamily="微软雅黑" 
			   applicationComplete="application_applicationCompleteHandler(event)"
			   creationComplete="facade.startup(this)">
	
	<fx:Style source="Main.css"/>
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import app.ApplicationFacade;
			import app.model.vo.*;
			
			import mx.events.FlexEvent;
			
			public var _selectedComponents:Object;
			
			private var facade:ApplicationFacade = ApplicationFacade.getInstance();			
						
			protected function application_applicationCompleteHandler(event:FlexEvent):void
			{
				this.stage.addEventListener(KeyboardEvent.KEY_DOWN,onKeyDown);
			}
			
			private function onKeyDown(event:KeyboardEvent):void
			{
				if(maskInput()) 
					return;
				
				if(_selectedComponents)
				{
					switch(event.keyCode)
					{
						case 37:
							moveCom(_selectedComponents,1,0);
							break;		
						
						case 40:
							moveCom(_selectedComponents,0,-1);
							break;			
						
						case 39:
							moveCom(_selectedComponents,-1,0);
							break;				
						
						case 38:
							moveCom(_selectedComponents,0,1);
							break;		
					}
				}
			}
			
			private function moveCom(ob:Object,dx:Number,dy:Number):void
			{
				if(ob is CommandHeightVO)
				{
					(ob as CommandHeightVO).TCH_X -= dx;
					(ob as CommandHeightVO).TCH_Y -= dy;
				}
				else if(ob is ClosedHandleVO)
				{
					(ob as ClosedHandleVO).T_ClosedX -= dx;
					(ob as ClosedHandleVO).T_ClosedY -= dy;
				}
				else if(ob is TrafficVO)
				{
					(ob as TrafficVO).T_TrafficX -= dx;
					(ob as TrafficVO).T_TrafficY -= dy;
				}
				else if(ob is HazardVO)
				{
					(ob as HazardVO).T_HazardX -= dx;
					(ob as HazardVO).T_HazardY -= dy;
				}
				else if(ob is FireHydrantVO)
				{
					(ob as FireHydrantVO).T_FireHydrantX -= dx;
					(ob as FireHydrantVO).T_FireHydrantY -= dy;
				}
				else if(ob is KeyUnitVO)
				{
					(ob as KeyUnitVO).T_KeyUnitsX -= dx;
					(ob as KeyUnitVO).T_KeyUnitsY -= dy;
				}
				else if(ob is ScentingVO)
				{
					(ob as ScentingVO).T_ScentingX -= dx;
					(ob as ScentingVO).T_ScentingY -= dy;
				}
				else if(ob is VideoVO)
				{
					(ob as VideoVO).T_VideoX -= dx;
					(ob as VideoVO).T_VideoY -= dy;
				}
				else if(ob is ImportExportVO)
				{
					(ob as ImportExportVO).T_ImportExportX -= dx;
					(ob as ImportExportVO).T_ImportExportY -= dy;
				}
			}		
			
			/** 
			 * 屏蔽所有的输入焦点 
			 * 防止在输入框中输入内容时会触发相应的快捷键操作 
			 */ 
			private function maskInput():Boolean 
			{ 
				var focusObj:Object = Object(focusManager.getFocus()); 
				var focusName:String = focusObj.className; 
				if(focusName=="NumericStepper"||focusName=="TextInput") 
				{ 
					if(focusObj.editable==true) 
					{ 
						return true; 
					} 
				} 
				return false; 
				
			} 	
		]]>
	</fx:Script>
	
	<components:MainPanel id="mainPanel" left="0" top="0" right="0" bottom="0"/>
	
	<components:AppLoadingBar id="appLoadingBar" left="0" top="0" right="0" bottom="0"/>
</s:Application>
